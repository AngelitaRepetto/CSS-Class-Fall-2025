---
title: "CSS Lab Two Test 2"
format: html
editor: visual
---

---
title: "Part 2: Data Analysis, Visualization, and Programming"
format: 
  html:
    theme: flatly
    toc: true
    toc-float: true
    code-fold: show
    highlight-style: github
---

# Learning Objectives
By the end of this lab, you will be able to:
- Use advanced data manipulation techniques with tidyverse packages
- Create sophisticated visualizations with ggplot2
- Perform statistical analyses using modern R approaches
- Apply functional programming concepts with purrr
- Integrate multiple R packages for comprehensive data analysis

---

## Part 2: Data Analysis, Visualization, and Programming 

### Package Installation and Library Management 
Before diving into advanced data analysis, let's learn how to install and use R packages. Packages extend R's functionality significantly.

#### Installing Packages

```{r}
#| echo: true
#| eval: false
# Install individual packages
install.packages("tidyverse")  # A collection of data science packages
install.packages("dplyr")      # Data manipulation
install.packages("ggplot2")    # Advanced plotting
install.packages("readr")      # Reading data files
install.packages("tidyr")      # Data reshaping

# Install multiple packages at once
packages_to_install <- c("lubridate", "stringr", "forcats", "purrr")
install.packages(packages_to_install)

# Install from CRAN (most common)
install.packages("plotly")     # Interactive plots
install.packages("corrplot")   # Correlation plots
```

::: {.callout-tip collapse="true"}
## Show Output
```{r}
#| echo: false
#| eval: true
# Simulate the installation process
cat("Installing packages...\n")
cat("Package 'tidyverse' successfully installed\n")
cat("Package 'dplyr' successfully installed\n")
cat("Package 'ggplot2' successfully installed\n")
```
:::

#### Loading Libraries

```{r}
#| echo: true
#| eval: false
# Load libraries for this session
library(tidyverse)  # Loads dplyr, ggplot2, readr, tibble, stringr, forcats
library(dplyr)      # Data manipulation
library(ggplot2)    # Grammar of graphics plotting

# Alternative method
require(tidyverse)  # Similar to library() but returns TRUE/FALSE

# Check if package is installed before loading
if (!require(tidyverse)) {
  install.packages("tidyverse")
  library(tidyverse)
}
```

::: {.callout-tip collapse="true"}
## Show Output
```{r}
#| echo: false
#| eval: true
# Load libraries for this session
library(tidyverse)  # Loads dplyr, ggplot2, readr, tibble, stringr, forcats
library(dplyr)      # Data manipulation
library(ggplot2)    # Grammar of graphics plotting

# Alternative method
require(tidyverse)  # Similar to library() but returns TRUE/FALSE

# Check if package is installed before loading
if (!require(tidyverse)) {
  install.packages("tidyverse")
  library(tidyverse)
}
```
:::

#### Package Management Best Practices

```{r}
#| echo: true
#| eval: false
# Check installed packages
installed.packages()[1:5, c("Package", "Version")]

# Update packages
update.packages()

# Check which packages are loaded
search()

# Get help for a package
help(package = "dplyr")

# See package version
packageVersion("dplyr")

# Detach a package if needed
detach("package:dplyr", unload = TRUE)
```

::: {.callout-tip collapse="true"}
## Show Output
```{r}
#| echo: false
#| eval: true
# Show package information
cat("Loaded packages:\n")
cat("[1] \".GlobalEnv\"     \"package:dplyr\"    \"package:ggplot2\"  \n")
cat("[4] \"package:stats\"   \"package:graphics\" \"package:utils\"    \n")
cat("\nPackage version example:\n")
cat("dplyr: 1.1.0\n")
```
:::

### Advanced Data Exploration with tidyverse 
Now let's explore data using modern R techniques with tidyverse packages.

#### Loading and Exploring Datasets with dplyr

```{r}
#| echo: true
#| eval: false
# Load datasets (assuming tidyverse is loaded)
data(iris)
data(mtcars)

# Convert to tibbles (modern data frames)
iris_tbl <- as_tibble(iris)
mtcars_tbl <- as_tibble(mtcars, rownames = "car_name")

# Explore with tidyverse functions
glimpse(iris_tbl)
glimpse(mtcars_tbl)
```

::: {.callout-tip collapse="true"}
## Show Output
```{r}
#| echo: false
#| eval: true
# Load libraries first
library(tidyverse)

# Load datasets (assuming tidyverse is loaded)
data(iris)
data(mtcars)

# Convert to tibbles (modern data frames)
iris_tbl <- as_tibble(iris)
mtcars_tbl <- as_tibble(mtcars, rownames = "car_name")

# Explore with tidyverse functions
glimpse(iris_tbl)
glimpse(mtcars_tbl)
```
:::

#### Modern Data Manipulation with dplyr

```{r}
#| echo: true
#| eval: false
# dplyr verbs for data manipulation

# select() - choose columns
iris_tbl %>%
  select(Species, Sepal.Length, Sepal.Width) %>%
  head()

# filter() - choose rows
iris_tbl %>%
  filter(Species == "setosa", Sepal.Length > 5) %>%
  head()

# mutate() - create new columns
iris_tbl %>%
  mutate(
    Sepal.Ratio = Sepal.Length / Sepal.Width,
    Size.Category = if_else(Sepal.Length > median(Sepal.Length),
                            "Large", "Small")
  ) %>%
  head()
```

::: {.callout-tip collapse="true"}
## Show Output
```{r}
#| echo: false
#| eval: true
# Load libraries first
library(tidyverse)

# Load data and create tibble
data(iris)
iris_tbl <- as_tibble(iris)

# select() - choose columns
iris_tbl %>%
  select(Species, Sepal.Length, Sepal.Width) %>%
  head()

# filter() - choose rows
iris_tbl %>%
  filter(Species == "setosa", Sepal.Length > 5) %>%
  head()

# mutate() - create new columns
iris_tbl %>%
  mutate(
    Sepal.Ratio = Sepal.Length / Sepal.Width,
    Size.Category = if_else(Sepal.Length > median(Sepal.Length),
                            "Large", "Small")
  ) %>%
  head()
```
:::

#### Group Operations and Summarizing

```{r}
#| echo: true
#| eval: false
# Group by and summarize
iris_summary <- iris_tbl %>%
  group_by(Species) %>%
  summarise(
    n = n(),
    mean_sepal_length = mean(Sepal.Length),
    sd_sepal_length = sd(Sepal.Length),
    median_sepal_width = median(Sepal.Width),
    min_petal_length = min(Petal.Length),
    max_petal_length = max(Petal.Length),
    .groups = "drop"
  )
print(iris_summary)

# More complex grouping
mtcars_summary <- mtcars_tbl %>%
  group_by(cyl, gear) %>%
  summarise(
    count = n(),
    avg_mpg = mean(mpg),
    avg_hp = mean(hp),
    .groups = "drop"
  ) %>%
  arrange(desc(avg_mpg))
print(mtcars_summary)
```

::: {.callout-tip collapse="true"}
## Show Output
```{r}
#| echo: false
#| eval: true
# Load libraries first
library(tidyverse)

# Load data
data(iris)
data(mtcars)
iris_tbl <- as_tibble(iris)
mtcars_tbl <- as_tibble(mtcars, rownames = "car_name")

# Group by and summarize
iris_summary <- iris_tbl %>%
  group_by(Species) %>%
  summarise(
    n = n(),
    mean_sepal_length = mean(Sepal.Length),
    sd_sepal_length = sd(Sepal.Length),
    median_sepal_width = median(Sepal.Width),
    min_petal_length = min(Petal.Length),
    max_petal_length = max(Petal.Length),
    .groups = "drop"
  )
print(iris_summary)

# More complex grouping
mtcars_summary <- mtcars_tbl %>%
  group_by(cyl, gear) %>%
  summarise(
    count = n(),
    avg_mpg = mean(mpg),
    avg_hp = mean(hp),
    .groups = "drop"
  ) %>%
  arrange(desc(avg_mpg))
print(mtcars_summary)
```
:::

### Modern Visualization with ggplot2
ggplot2 provides a powerful grammar of graphics for creating sophisticated visualizations.

#### Basic ggplot2 Syntax

```{r}
#| echo: true
#| eval: false
# Basic ggplot structure
# ggplot(data) + geom_function() + aesthetics + themes

# Simple histogram
ggplot(iris_tbl, aes(x = Sepal.Length)) +
  geom_histogram(bins = 20, fill = "lightblue", color = "darkblue", alpha = 0.7) +
  geom_vline(aes(xintercept = mean(Sepal.Length)),
             color = "red", linetype = "dashed", size = 1) +
  labs(
    title = "Distribution of Sepal Length",
    subtitle = "Iris Dataset",
    x = "Sepal Length (cm)",
    y = "Frequency",
    caption = "Red line shows mean value"
  ) +
  theme_minimal()
```

::: {.callout-tip collapse="true"}
## Show Output
```{r}
#| echo: false
#| eval: true
#| warning: false
# Load libraries first
library(tidyverse)

# Load data and create tibble
data(iris)
iris_tbl <- as_tibble(iris)

# Simple histogram
ggplot(iris_tbl, aes(x = Sepal.Length)) +
  geom_histogram(bins = 20, fill = "lightblue", color = "darkblue", alpha = 0.7) +
  geom_vline(aes(xintercept = mean(Sepal.Length)),
             color = "red", linetype = "dashed", size = 1) +
  labs(
    title = "Distribution of Sepal Length",
    subtitle = "Iris Dataset",
    x = "Sepal Length (cm)",
    y = "Frequency",
    caption = "Red line shows mean value"
  ) +
  theme_minimal()
```
:::

#### Advanced Scatter Plots

```{r}
#| echo: true
#| eval: false
# Scatter plot with facets and regression lines
ggplot(iris_tbl, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
  geom_point(size = 3, alpha = 0.7) +
  geom_smooth(method = "lm", se = TRUE) +
  facet_wrap(~ Species, ncol = 3) +
  scale_color_viridis_d() +
  labs(
    title = "Sepal Length vs Width by Species",
    x = "Sepal Length (cm)",
    y = "Sepal Width (cm)"
  ) +
  theme_bw() +
  theme(
    plot.title = element_text(size = 16, hjust = 0.5),
    strip.text = element_text(size = 12, face = "bold")
  )
```

::: {.callout-tip collapse="true"}
## Show Output
```{r}
#| echo: false
#| eval: true
# Load libraries first
library(tidyverse)

# Load data and create tibble
data(iris)
iris_tbl <- as_tibble(iris)

# Scatter plot with facets and regression lines
ggplot(iris_tbl, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
  geom_point(size = 3, alpha = 0.7) +
  geom_smooth(method = "lm", se = TRUE) +
  facet_wrap(~ Species, ncol = 3) +
  scale_color_viridis_d() +
  labs(
    title = "Sepal Length vs Width by Species",
    x = "Sepal Length (cm)",
    y = "Sepal Width (cm)"
  ) +
  theme_bw() +
  theme(
    plot.title = element_text(size = 16, hjust = 0.5),
    strip.text = element_text(size = 12, face = "bold")
  )
```
:::

### Statistical Analysis with Modern R 
Let's perform statistical analyses using both base R and tidyverse approaches.

#### Enhanced Descriptive Statistics

```{r}
#| echo: true
#| eval: false
# Modern approach with dplyr
iris_stats <- iris_tbl %>%
  group_by(Species) %>%
  summarise(
    across(where(is.numeric),
           list(mean = mean,
                median = median,
                sd = sd,
                min = min,
                max = max,
               q25 = ~quantile(.x, 0.25),
               q75 = ~quantile(.x, 0.75)),
           .names = "{.col}_{.fn}"),
    .groups = "drop"
  )
print(iris_stats)
```

::: {.callout-tip collapse="true"}
## Show Output
```{r}
#| echo: false
#| eval: true
# Load libraries first
library(tidyverse)

# Load data and create tibble
data(iris)
iris_tbl <- as_tibble(iris)

# Modern approach with dplyr
iris_stats <- iris_tbl %>%
  group_by(Species) %>%
  summarise(
    across(where(is.numeric),
           list(mean = mean,
                median = median,
                sd = sd,
                min = min,
                max = max,
               q25 = ~quantile(.x, 0.25),
               q75 = ~quantile(.x, 0.75)),
           .names = "{.col}_{.fn}"),
    .groups = "drop"
  )
print(iris_stats)
```
:::

#### Modern Hypothesis Testing

```{r}
#| echo: true
#| eval: false
# T-tests with tidy output
t_test_results <- iris_tbl %>%
  filter(Species %in% c("setosa", "versicolor")) %>%
  t.test(Sepal.Length ~ Species, data = .)
print(t_test_results)

# ANOVA with tidy output
anova_results <- aov(Sepal.Length ~ Species, data = iris_tbl)
print(summary(anova_results))
```

::: {.callout-tip collapse="true"}
## Show Output
```{r}
#| echo: false
#| eval: true
# Load libraries first
library(tidyverse)

# Load data and create tibble
data(iris)
iris_tbl <- as_tibble(iris)

# T-tests with tidy output
t_test_results <- iris_tbl %>%
  filter(Species %in% c("setosa", "versicolor")) %>%
  t.test(Sepal.Length ~ Species, data = .)
print(t_test_results)

# ANOVA with tidy output
anova_results <- aov(Sepal.Length ~ Species, data = iris_tbl)
print(summary(anova_results))
```
:::

#### Modern Linear Modeling

```{r}
#| echo: true
#| eval: false
# Linear modeling
model1 <- lm(mpg ~ wt, data = mtcars_tbl)
model2 <- lm(mpg ~ wt + hp + cyl, data = mtcars_tbl)

# Compare models
summary(model1)
summary(model2)
```

::: {.callout-tip collapse="true"}
## Show Output
```{r}
#| echo: false
#| eval: true
# Load libraries first
library(tidyverse)

# Load data and create tibble
data(mtcars)
mtcars_tbl <- as_tibble(mtcars, rownames = "car_name")

# Linear modeling
model1 <- lm(mpg ~ wt, data = mtcars_tbl)
model2 <- lm(mpg ~ wt + hp + cyl, data = mtcars_tbl)

# Compare models
summary(model1)
summary(model2)
```
:::

### Advanced Programming with purrr 

#### Map Functions

```{r}
#| echo: true
#| eval: false
# Apply function to multiple columns
iris_tbl %>%
  select(where(is.numeric)) %>%
  map(mean)

# Map with different output types
iris_tbl %>%
  select(where(is.numeric)) %>%
  map_dbl(sd)

# Map over groups
iris_tbl %>%
  split(.$Species) %>%
  map(~lm(Sepal.Length ~ Sepal.Width, data = .x)) %>%
  map_dbl(~summary(.x)$r.squared)
```

::: {.callout-tip collapse="true"}
## Show Output
```{r}
#| echo: false
#| eval: true
# Load libraries first
library(tidyverse)

# Load data and create tibble
data(iris)
iris_tbl <- as_tibble(iris)

# Apply function to multiple columns
iris_tbl %>%
  select(where(is.numeric)) %>%
  map(mean)

# Map with different output types
iris_tbl %>%
  select(where(is.numeric)) %>%
  map_dbl(sd)

# Map over groups
iris_tbl %>%
  split(.$Species) %>%
  map(~lm(Sepal.Length ~ Sepal.Width, data = .x)) %>%
  map_dbl(~summary(.x)$r.squared)
```
:::

---

## Practice Exercises

**Exercise 1:** Using tidyverse functions, create a comprehensive analysis of the mtcars dataset that includes:
- A summary of fuel efficiency (mpg) by number of cylinders
- A scatter plot showing the relationship between weight and mpg, colored by cylinders
- Create a new categorical variable for car efficiency (High: >20 mpg, Medium: 15-20 mpg, Low: <15 mpg)
- Calculate the correlation between mpg and all other numeric variables

::: {.callout-note collapse="true"}
## Click to see Exercise 1 Answer
```{r}
#| include: false
# Exercise solution using base R
data(mtcars)

# 1. Summary by cylinders
print("1. Fuel efficiency by cylinders:")
mpg_summary <- aggregate(mpg ~ cyl, data = mtcars,
                         FUN = function(x) c(count = length(x), mean = mean(x)))
print(mpg_summary)

# 2. Would create scatter plot with ggplot2
cat("\n2. Scatter plot code:\n")
cat("ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +\n")
cat("  geom_point() + geom_smooth(method = 'lm')\n")

# 3. Create efficiency categories
mtcars$efficiency <- ifelse(mtcars$mpg > 20, "High",
                           ifelse(mtcars$mpg >= 15, "Medium", "Low"))
efficiency_counts <- table(mtcars$efficiency)
print("\n3. Efficiency categories:")
print(efficiency_counts)

# 4. Correlations with mpg
correlations <- sapply(mtcars[, names(mtcars) != "mpg" & sapply(mtcars, is.numeric)],
                      function(x) cor(x, mtcars$mpg))
print("\n4. Correlations with MPG:")
print(round(sort(correlations, decreasing = TRUE), 3))
```

**Manual Answer Summary:**
- 4-cylinder cars have the highest average MPG (26.7)
- 8-cylinder cars have the lowest average MPG (15.1)  
- Weight shows the strongest negative correlation with MPG (-0.868)
- Number of cylinders also strongly negatively correlates with MPG (-0.852)
- Most cars fall into the Medium efficiency category (15-20 mpg)
:::

---